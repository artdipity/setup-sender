#!/bin/bash
set -e

echo "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ Telegram..."

# === 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–° ===
if [[ "$OSTYPE" != "darwin"* ]]; then
  echo "‚ö†Ô∏è –≠—Ç–æ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ macOS. –î–ª—è Linux –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è."
fi

# === 1. Homebrew ===
if ! command -v brew &> /dev/null; then
  echo "üç∫ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# === 2. pyenv –∏ git ===
echo "üêç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pyenv –∏ pyenv-virtualenv..."
brew install pyenv pyenv-virtualenv git nano

# –î–æ–±–∞–≤–ª—è–µ–º pyenv –≤ zshrc
if ! grep -q 'pyenv init' ~/.zshrc; then
  {
    echo ''
    echo '# pyenv init'
    echo 'eval "$(pyenv init -)"'
    echo 'eval "$(pyenv virtualenv-init -)"'
  } >> ~/.zshrc
fi

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# === 3. Python ===
PYTHON_VERSION=3.10.13
if ! pyenv versions | grep -q "$PYTHON_VERSION"; then
  echo "‚¨áÔ∏è –°—Ç–∞–≤–∏–º Python $PYTHON_VERSION..."
  pyenv install "$PYTHON_VERSION"
fi

if ! pyenv virtualenvs | grep -q "tg_env_tgsender"; then
  pyenv virtualenv "$PYTHON_VERSION" tg_env_tgsender
fi

# === 4. –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ===
TARGET_DIR=~/tg_sender
mkdir -p "$TARGET_DIR"
cd "$TARGET_DIR"

# === 5. requirements.txt ===
cat <<EOF > requirements.txt
telethon==1.41.2
apscheduler==3.11.0
python-dotenv==1.1.1
rsa==4.9.1
pyaes==1.6.1
pyasn1==0.6.1
tzlocal==5.3.1
EOF

pyenv activate tg_env_tgsender
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
pip install --upgrade pip
pip install -r requirements.txt

# === 6. –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===
echo "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
read -p "API_ID (my.telegram.org): " API_ID
read -p "API_HASH: " API_HASH
read -p "PHONE (+380...): " PHONE

echo "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (Ctrl+D ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥):"
MESSAGE=$(</dev/stdin)

# === 7. –°–æ–∑–¥–∞—ë–º .env ===
cat <<EOF > .env
API_ID=$API_ID
API_HASH=$API_HASH
PHONE=$PHONE
EOF

# === 8. message.txt ===
cat <<EOF > message.txt
$MESSAGE
EOF

# === 9. sender_full.py ===
cat <<'EOF' > sender_full.py
import os, re, asyncio
from typing import List, Tuple, Optional
from telethon import TelegramClient
from telethon.errors import FloodWaitError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
PHONE = os.getenv("PHONE")

MESSAGE_FILE = "message.txt"
GROUPS_DIR = "groups"
LOGS_DIR = "logs"
GROUP_FILES = {
    "hourly": os.path.join(GROUPS_DIR, "hourly.txt"),
    "daily": os.path.join(GROUPS_DIR, "daily.txt"),
    "3days": os.path.join(GROUPS_DIR, "3days.txt"),
}
os.makedirs(GROUPS_DIR, exist_ok=True)
os.makedirs(LOGS_DIR, exist_ok=True)

def load_message():
    if os.path.exists(MESSAGE_FILE):
        return open(MESSAGE_FILE, "r", encoding="utf-8").read().strip()
    return "‚ö°Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

def load_groups(path: str) -> List[str]:
    if not os.path.exists(path): return []
    lines = [ln.strip() for ln in open(path, "r", encoding="utf-8") if ln.strip()]
    seen, result = set(), []
    for g in lines:
        if g not in seen:
            seen.add(g); result.append(g)
    return result

def parse_topic_link(link: str) -> Tuple[str, Optional[int]]:
    m = re.match(r'^(https?://t\.me/[^/\s]+)/(\d+)$', link)
    return (m.group(1), int(m.group(2))) if m else (link, None)

async def send_one(client, link, msg, label):
    base, topic_id = parse_topic_link(link)
    try:
        if topic_id: await client.send_message(base, msg, reply_to=topic_id)
        else: await client.send_message(base, msg)
        print(f"[{label}] -> {link} ‚úÖ")
    except FloodWaitError as fw:
        print(f"[{label}] FloodWait {fw.seconds}s")
    except Exception as e:
        print(f"[{label}] {link} ‚ùå {e}")

async def blast_list(client, label):
    groups, msg = load_groups(GROUP_FILES[label]), load_message()
    if not groups: return
    print(f"=== –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç {label} ({len(groups)}) ===")
    for g in groups: await send_one(client, g, msg, label); await asyncio.sleep(3)

async def send_list(client, label):
    groups, msg = load_groups(GROUP_FILES[label]), load_message()
    if not groups: return
    print(f"=== –†–∞—Å—Å—ã–ª–∫–∞ {label} ===")
    for g in groups: await send_one(client, g, msg, label); await asyncio.sleep(3)

async def main():
    client = TelegramClient("tg_session", API_ID, API_HASH)
    await client.start(phone=PHONE)
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

    for lb in ("hourly","daily","3days"): await blast_list(client, lb)

    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(send_list(client,"hourly")),"interval",hours=1)
    scheduler.add_job(lambda: asyncio.create_task(send_list(client,"daily")),"interval",hours=24)
    scheduler.add_job(lambda: asyncio.create_task(send_list(client,"3days")),"interval",hours=72)
    scheduler.start()
    print("‚è≥ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")
    await asyncio.Event().wait()

if __name__ == "__main__": asyncio.run(main())
EOF

# === 10. –ì—Ä—É–ø–ø—ã (–≥–æ—Ç–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏) ===
mkdir -p groups
cat <<'EOF' > groups/hourly.txt
https://t.me/Sugar_Desk
https://t.me/devil_desk
EOF

cat <<'EOF' > groups/daily.txt
https://t.me/adult_18_board
https://t.me/onlyfanspromoroom
EOF

cat <<'EOF' > groups/3days.txt
https://t.me/CardoCrewDesk
https://t.me/adszavety
EOF

# === 11. –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã ===
cat <<'EOF' > start.sh
#!/bin/bash
cd ~/tg_sender
eval "$(pyenv init -)"; eval "$(pyenv virtualenv-init -)"
pyenv activate tg_env_tgsender
python sender_full.py
EOF
chmod +x start.sh

cat <<'EOF' > stop.sh
#!/bin/bash
pkill -f "python sender_full.py" || true
echo "‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
EOF
chmod +x stop.sh

cat <<'EOF' > status.sh
#!/bin/bash
ps aux | grep sender_full.py | grep -v grep || echo "–ù–µ –∑–∞–ø—É—â–µ–Ω–æ"
EOF
chmod +x status.sh

cat <<'EOF' > setmsg.sh
#!/bin/bash
cd ~/tg_sender
echo "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (Ctrl+D ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å):"
cat > message.txt
echo "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
EOF
chmod +x setmsg.sh

cat <<'EOF' > setgroups.sh
#!/bin/bash
cd ~/tg_sender/groups
nano hourly.txt daily.txt 3days.txt
EOF
chmod +x setgroups.sh

cat <<'EOF' > setenv.sh
#!/bin/bash
cd ~/tg_sender
read -p "API_ID: " API_ID
read -p "API_HASH: " API_HASH
read -p "PHONE: " PHONE
cat <<ENV > .env
API_ID=$API_ID
API_HASH=$API_HASH
PHONE=$PHONE
ENV
echo "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
EOF
chmod +x setenv.sh

cat <<'EOF' > relogin.sh
#!/bin/bash
cd ~/tg_sender
echo "‚õîÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é..."
rm -f tg_session.session
./setenv.sh
echo "–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ ./start.sh –¥–ª—è –≤—Ö–æ–¥–∞ —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º."
EOF
chmod +x relogin.sh

echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd ~/tg_sender && ./start.sh"
