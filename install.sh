#!/bin/bash
set -e

echo "üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ Telegram..."

# === 0) –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–° ===
if [[ "$OSTYPE" != "darwin"* ]]; then
  echo "‚ö†Ô∏è –≠—Ç–æ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ macOS. –î–ª—è Linux –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è."
fi

# === 1) Homebrew ===
if ! command -v brew &> /dev/null; then
  echo "üç∫ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# === 2) pyenv, virtualenv, git, nano ===
echo "üêç –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pyenv, pyenv-virtualenv, git, nano..."
brew install pyenv pyenv-virtualenv git nano || true

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é pyenv –≤ zshrc (–µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç)
if ! grep -q 'pyenv init' ~/.zshrc; then
  {
    echo ''
    echo '# pyenv init'
    echo 'eval "$(pyenv init -)"'
    echo 'eval "$(pyenv virtualenv-init -)"'
  } >> ~/.zshrc
fi

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º pyenv –≤ —Ç–µ–∫—É—â—É—é –æ–±–æ–ª–æ—á–∫—É
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# === 3) Python —á–µ—Ä–µ–∑ pyenv ===
PYTHON_VERSION=3.10.13
if ! pyenv versions | grep -q "$PYTHON_VERSION"; then
  echo "‚¨áÔ∏è –°—Ç–∞–≤–∏–º Python $PYTHON_VERSION (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)..."
  pyenv install "$PYTHON_VERSION"
fi
if ! pyenv virtualenvs | grep -q "tg_env_tgsender"; then
  pyenv virtualenv "$PYTHON_VERSION" tg_env_tgsender
fi

# === 4) –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ===
TARGET_DIR=~/tg_sender
mkdir -p "$TARGET_DIR"
cd "$TARGET_DIR"

# === 5) requirements.txt ===
cat <<'EOF' > requirements.txt
telethon==1.41.2
apscheduler==3.11.0
python-dotenv==1.1.1
rsa==4.9.1
pyaes==1.6.1
pyasn1==0.6.1
tzlocal==5.3.1
EOF

# === 6) –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —Å—Ç–∞–≤–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ===
pyenv activate tg_env_tgsender
echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
pip install --upgrade pip
pip install -r requirements.txt

# === 7) –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===
echo "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
read -p "API_ID (my.telegram.org): " API_ID
read -p "API_HASH: " API_HASH
read -p "PHONE (+380...): " PHONE

echo ""
echo "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (Ctrl+D ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥):"
MESSAGE=$(</dev/stdin)

# === 8) .env (–≤–∫–ª—é—á–∞—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã/–∑–∞–¥–µ—Ä–∂–∫–∏, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥–æ–π setdelays.sh) ===
cat <<EOF > .env
API_ID=$API_ID
API_HASH=$API_HASH
PHONE=$PHONE

# –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–≤ –º–∏–Ω—É—Ç–∞—Ö)
HOURLY_EVERY_MIN=60
DAILY_EVERY_MIN=1440
THREEDAYS_EVERY_MIN=4320

# –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
SEND_DELAY=3
JITTER_PCT=0.10
EOF

# === 9) message.txt ===
cat <<EOF > message.txt
$MESSAGE
EOF

# === 10) sender_full.py (2FA, –∞–≤—Ç–æ—Å–µ–Ω–¥ —Å—Ä–∞–∑—É –ø–æ –≤—Å–µ–º, –∑–∞—Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é; /topic –ø–æ–¥–¥–µ—Ä–∂–∫–∞) ===
cat <<'EOF' > sender_full.py
import os, re, asyncio, random, signal
from typing import List, Tuple, Optional
from telethon import TelegramClient
from telethon.errors import FloodWaitError, SessionPasswordNeededError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()

API_ID  = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
PHONE    = os.getenv("PHONE")

MESSAGE_FILE = "message.txt"
GROUPS_DIR = "groups"
LOGS_DIR   = "logs"

# –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
HOURLY_EVERY_MIN   = int(os.getenv("HOURLY_EVERY_MIN", "60"))
DAILY_EVERY_MIN    = int(os.getenv("DAILY_EVERY_MIN", "1440"))
THREEDAYS_EVERY_MIN= int(os.getenv("THREEDAYS_EVERY_MIN", "4320"))

# –∑–∞–¥–µ—Ä–∂–∫–∏
SEND_DELAY = float(os.getenv("SEND_DELAY", "3"))
JITTER_PCT = float(os.getenv("JITTER_PCT", "0.10"))

GROUP_FILES = {
    "hourly":   os.path.join(GROUPS_DIR, "hourly.txt"),
    "daily":    os.path.join(GROUPS_DIR, "daily.txt"),
    "3days":    os.path.join(GROUPS_DIR, "3days.txt"),
}

os.makedirs(GROUPS_DIR, exist_ok=True)
os.makedirs(LOGS_DIR, exist_ok=True)

def load_message() -> str:
    if os.path.exists(MESSAGE_FILE):
        with open(MESSAGE_FILE, "r", encoding="utf-8") as f:
            return f.read().strip()
    return "‚ö°Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

def load_groups(path: str) -> List[str]:
    if not os.path.exists(path):
        return []
    lines = []
    with open(path, "r", encoding="utf-8") as f:
        for ln in f:
            ln = ln.strip()
            if not ln or ln.startswith("#"):
                continue
            lines.append(ln)
    # —É–¥–∞–ª–∏–º –¥—É–±–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    out = []
    for g in lines:
        if g not in seen:
            seen.add(g)
            out.append(g)
    return out

def parse_topic_link(link: str) -> Tuple[str, Optional[int]]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä—É–º–Ω—ã—Ö —Ç–µ–º: https://t.me/<chat>/<topic_id>
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ—Å–Ω–æ–≤–Ω–∞—è_—Å—Å—ã–ª–∫–∞, topic_id|None)
    """
    m = re.match(r'^(https?://t\.me/[^/\s]+)/(\d+)$', link)
    if m:
        return m.group(1), int(m.group(2))
    return link, None

async def smart_sleep():
    if SEND_DELAY <= 0:
        return
    jitter = SEND_DELAY * JITTER_PCT
    delay = max(0.0, random.uniform(SEND_DELAY - jitter, SEND_DELAY + jitter))
    await asyncio.sleep(delay)

async def send_one(client: TelegramClient, link: str, msg: str, label: str):
    base, topic_id = parse_topic_link(link)
    try:
        if topic_id:
            await client.send_message(base, msg, reply_to=topic_id)
        else:
            await client.send_message(base, msg)
        print(f"[{label}] -> {link} ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except FloodWaitError as fw:
        print(f"[{label}] -> {link} ‚ùå FloodWait: {fw.seconds}s")
    except Exception as e:
        print(f"[{label}] -> {link} ‚ùå –æ—à–∏–±–∫–∞: {e}")

async def blast_list(client: TelegramClient, label: str):
    path = GROUP_FILES[label]
    groups = load_groups(path)
    msg = load_message()
    if not groups:
        print(f"[{label}] —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    print(f"=== –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç {label}: {len(groups)} –≥—Ä—É–ø–ø ===")
    for g in groups:
        await send_one(client, g, msg, label)
        await smart_sleep()
    print(f"=== –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç {label} –∑–∞–≤–µ—Ä—à—ë–Ω ===")

async def send_list(client: TelegramClient, label: str):
    path = GROUP_FILES[label]
    groups = load_groups(path)
    msg = load_message()
    if not groups:
        print(f"[{label}] —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    print(f"=== –†–∞—Å—Å—ã–ª–∫–∞ {label} –Ω–∞—á–∞—Ç–∞ ===")
    for g in groups:
        await send_one(client, g, msg, label)
        await smart_sleep()
    print(f"=== –†–∞—Å—Å—ã–ª–∫–∞ {label} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

async def ensure_login(client: TelegramClient):
    await client.connect()
    if await client.is_user_authorized():
        return
    # –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–¥
    await client.send_code_request(PHONE)
    code = input("‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ").strip()
    try:
        await client.sign_in(PHONE, code)
    except SessionPasswordNeededError:
        pw = input("üîê –í–≤–µ–¥–∏—Ç–µ 2FA –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á—ë–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ Enter): ")
        await client.sign_in(password=pw)

async def main():
    client = TelegramClient("tg_session", API_ID, API_HASH)
    await ensure_login(client)
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

    # –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç: —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ –≤—Å–µ–º —Å–ø–∏—Å–∫–∞–º
    for lb in ("hourly","daily","3days"):
        await blast_list(client, lb)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: asyncio.create_task(send_list(client,"hourly")),
                      "interval", minutes=HOURLY_EVERY_MIN)
    scheduler.add_job(lambda: asyncio.create_task(send_list(client,"daily")),
                      "interval", minutes=DAILY_EVERY_MIN)
    scheduler.add_job(lambda: asyncio.create_task(send_list(client,"3days")),
                      "interval", minutes=THREEDAYS_EVERY_MIN)
    scheduler.start()

    print("‚è≥ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –†–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ...")
    stop_event = asyncio.Event()

    def handle_sig(*_):
        print("‚õîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        stop_event.set()

    for sig in (signal.SIGINT, signal.SIGTERM):
        try:
            asyncio.get_running_loop().add_signal_handler(sig, handle_sig)
        except NotImplementedError:
            pass

    await stop_event.wait()

if __name__ == "__main__":
    asyncio.run(main())
EOF

# === 11) –ì—Ä—É–ø–ø—ã (—Ç–≤–æ–∏ —Å–ø–∏—Å–∫–∏) ===
mkdir -p groups

# hourly.txt ‚Äî –±–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫
cat <<'EOF' > groups/hourly.txt
https://t.me/Sugar_Desk
https://t.me/devil_desk
https://t.me/TopDatingForum
https://t.me/brachnie/4
https://t.me/Dating_Forums
https://t.me/adult_news1/1
https://t.me/brachnie/1
https://t.me/datingforumm/1
https://t.me/dating_board/1
https://t.me/board_adult1/1
https://t.me/TvoyaVip/1
https://t.me/OFM_Rich/1
https://t.me/StartDoska/1
https://t.me/onlyfans_board1/1
https://t.me/LookHereDoskaOF/1
https://t.me/JustDoska/1
https://t.me/THE_EDENIC_DESK
https://t.me/only_traff
https://t.me/luxury_adult
https://t.me/adult_team_desk
https://t.me/TeamUnityHub
https://t.me/lixxidesk
https://t.me/PandaDesk
https://t.me/barbie_agency111
https://t.me/onlymiumiu
https://t.me/adult_desk
https://t.me/DinoDesk
https://t.me/easyonlyeo
https://t.me/doska_365
https://t.me/adult_board_ofm
https://t.me/BuddaHubBoard
https://t.me/TopDatingForum
https://t.me/dating_board
https://t.me/mixxidesk
https://t.me/adultbestdesk
https://t.me/desk_shark
https://t.me/OFBchat
https://t.me/OnlyBulletin
https://t.me/Adults_play_Board
https://t.me/desk_lion
https://t.me/ADOboard
https://t.me/Minnieadult
https://t.me/board_adult1
https://t.me/promoperfrection
https://t.me/only_fasly
https://t.me/webcamadultdesk
https://t.me/KarandashDesk
https://t.me/ONLYTRAFCH
https://t.me/IndustryAdult
https://t.me/Onlyfans_Hunters
https://t.me/bigdoskaoficial
https://t.me/bigdoskaof
https://t.me/LookHereDoskaOF
https://t.me/onlyfans_live_board
https://t.me/of_desk
https://t.me/board_onlyfans
https://t.me/onlyfans_desk
https://t.me/rumorsii
https://t.me/ICE_adult
https://t.me/easyonlyeasyeo
https://t.me/onlyfans_chaty
https://t.me/onlyfansboom
https://t.me/Adaltpro
https://t.me/adulters_BF
https://t.me/boardonlyfans
https://t.me/webcamdoska
https://t.me/forumonly/597
https://t.me/onlydeskadult
https://t.me/TeamUnityWow
https://t.me/FunsDesk
https://t.me/onlyfans_legit
https://t.me/ofmboardonlyfans
https://t.me/TeamUnityAdult
https://t.me/theOFMdesk
https://t.me/MonkeyDesk
https://t.me/only_adult_chat
https://t.me/onlyfans_mart
https://t.me/DeskCrew
https://t.me/of_desk_adalt
https://t.me/VampireDesk
https://t.me/OnlyBoardTG
https://t.me/HubDesk
https://t.me/unholy_desk
https://t.me/adult_headhunt
https://t.me/doska1012
https://t.me/Advertising_BF
https://t.me/AdultHarmonyDesk
https://t.me/adult_news1
https://t.me/StartDoska
https://t.me/virgin_grooup
https://t.me/Adult_Board
https://t.me/adultswit_desk
https://t.me/webcam_token
https://t.me/DeskSpark
https://t.me/SoloMoon_community
https://t.me/onlyadating
https://t.me/CrocoDesk
https://t.me/collectordesk
https://t.me/acaagawgfwa
https://t.me/ADULT_DOSKA
https://t.me/only_adult_desk
https://t.me/Meduza_OF_Desk
https://t.me/black_only_desk
https://t.me/coredesk
https://t.me/only_desk
https://t.me/jobadult
https://t.me/nikodesk
https://t.me/onlydesc
https://t.me/wixxidesk
https://t.me/onlyfanspromoroom
https://t.me/adult_markets
https://t.me/OnlyDesk
https://t.me/BIGDesk
https://t.me/Dating_Forums
https://t.me/SugarDesk
https://t.me/disneydesk
https://t.me/Workers_Desk
https://t.me/camweboard
https://t.me/goatsof
https://t.me/OTC_ADULT
https://t.me/apreeteam_desk
https://t.me/adulthubdoska
EOF

# daily.txt ‚Äî –ø—Ä–∏–º–µ—Ä
cat <<'EOF' > groups/daily.txt
https://t.me/adult_18_board
https://t.me/onlyfanspromoroom
https://t.me/Adult_platform
https://t.me/OnlyBulletin
https://t.me/adult_desk
EOF

# 3days.txt ‚Äî –ø—Ä–∏–º–µ—Ä
cat <<'EOF' > groups/3days.txt
https://t.me/CardoCrewDesk
https://t.me/CardoCrewDeskTraffic
https://t.me/adszavety
EOF

# === 12) –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã ===

# –∑–∞–ø—É—Å–∫
cat <<'EOF' > start.sh
#!/bin/bash
cd ~/tg_sender
eval "$(pyenv init -)"; eval "$(pyenv virtualenv-init -)"
pyenv activate tg_env_tgsender
echo "‚ñ∂Ô∏è  –°—Ç–∞—Ä—Ç: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è/—Ä–∞—Å—Å—ã–ª–∫–∞..."
python sender_full.py
EOF
chmod +x start.sh

# —Å—Ç–æ–ø
cat <<'EOF' > stop.sh
#!/bin/bash
pkill -f "python sender_full.py" || true
echo "‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
EOF
chmod +x stop.sh

# —Å—Ç–∞—Ç—É—Å
cat <<'EOF' > status.sh
#!/bin/bash
ps aux | grep sender_full.py | grep -v grep || echo "–ù–µ –∑–∞–ø—É—â–µ–Ω–æ"
EOF
chmod +x status.sh

# —Å–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
cat <<'EOF' > setmsg.sh
#!/bin/bash
cd ~/tg_sender
echo "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (Ctrl+D ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å):"
cat > message.txt
echo "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./stop.sh && ./start.sh"
EOF
chmod +x setmsg.sh

# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –≥—Ä—É–ø–ø
cat <<'EOF' > setgroups.sh
#!/bin/bash
cd ~/tg_sender/groups
echo "üìÇ –û—Ç–∫—Ä–æ–µ—Ç—Å—è nano. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: Ctrl+O, Enter. –í—ã—Ö–æ–¥: Ctrl+X."
read -p "–û—Ç–∫—Ä—ã—Ç—å hourly.txt? (y/n): " A; [[ "$A" == "y" ]] && nano hourly.txt
read -p "–û—Ç–∫—Ä—ã—Ç—å daily.txt?  (y/n): " B; [[ "$B" == "y" ]] && nano daily.txt
read -p "–û—Ç–∫—Ä—ã—Ç—å 3days.txt? (y/n): " C; [[ "$C" == "y" ]] && nano 3days.txt
echo "‚úÖ –ì—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: ~/tg_sender/stop.sh && ~/tg_sender/start.sh"
EOF
chmod +x setgroups.sh

# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env (API/PHONE)
cat <<'EOF' > setenv.sh
#!/bin/bash
cd ~/tg_sender
read -p "API_ID: " API_ID
read -p "API_HASH: " API_HASH
read -p "PHONE (+...): " PHONE
cat <<ENV > .env
API_ID=$API_ID
API_HASH=$API_HASH
PHONE=$PHONE
# –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–º–∏–Ω)
HOURLY_EVERY_MIN=${HOURLY_EVERY_MIN:-60}
DAILY_EVERY_MIN=${DAILY_EVERY_MIN:-1440}
THREEDAYS_EVERY_MIN=${THREEDAYS_EVERY_MIN:-4320}
# –∑–∞–¥–µ—Ä–∂–∫–∏
SEND_DELAY=${SEND_DELAY:-3}
JITTER_PCT=${JITTER_PCT:-0.10}
ENV
echo "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env"
echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É: ./stop.sh && ./start.sh"
EOF
chmod +x setenv.sh

# —Å–º–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤/–∑–∞–¥–µ—Ä–∂–µ–∫
cat <<'EOF' > setdelays.sh
#!/bin/bash
cd ~/tg_sender
source .env 2>/dev/null || true
read -p "HOURLY_EVERY_MIN (–º–∏–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ${HOURLY_EVERY_MIN:-60}): " A
read -p "DAILY_EVERY_MIN (–º–∏–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ${DAILY_EVERY_MIN:-1440}): " B
read -p "THREEDAYS_EVERY_MIN (–º–∏–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ${THREEDAYS_EVERY_MIN:-4320}): " C
read -p "SEND_DELAY (—Å–µ–∫, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ${SEND_DELAY:-3}): " D
read -p "JITTER_PCT (–¥–æ–ª—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ${JITTER_PCT:-0.10}): " E
cat <<ENV > .env
API_ID=${API_ID}
API_HASH=${API_HASH}
PHONE=${PHONE}
HOURLY_EVERY_MIN=${A:-${HOURLY_EVERY_MIN:-60}}
DAILY_EVERY_MIN=${B:-${DAILY_EVERY_MIN:-1440}}
THREEDAYS_EVERY_MIN=${C:-${THREEDAYS_EVERY_MIN:-4320}}
SEND_DELAY=${D:-${SEND_DELAY:-3}}
JITTER_PCT=${E:-${JITTER_PCT:-0.10}}
ENV
echo "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./stop.sh && ./start.sh"
EOF
chmod +x setdelays.sh

# –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Å–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞)
cat <<'EOF' > relogin.sh
#!/bin/bash
cd ~/tg_sender
echo "‚õîÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é..."
rm -f tg_session.session*
./setenv.sh
echo "–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ ./start.sh –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ–¥/–ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ."
EOF
chmod +x relogin.sh

echo ""
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å:  cd ~/tg_sender && ./start.sh"
echo "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  ./stop.sh           ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
echo "  ./status.sh         ‚Äî —Å—Ç–∞—Ç—É—Å"
echo "  ./setmsg.sh         ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"
echo "  ./setgroups.sh      ‚Äî –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ –≥—Ä—É–ø–ø"
echo "  ./setenv.sh         ‚Äî —Å–º–µ–Ω–∏—Ç—å API/–Ω–æ–º–µ—Ä"
echo "  ./setdelays.sh      ‚Äî —Å–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã/–∑–∞–¥–µ—Ä–∂–∫–∏"
echo "  ./relogin.sh        ‚Äî –≤—Ö–æ–¥ —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º (—É–¥–∞–ª–∏—Ç —Å–µ—Å—Å–∏—é)"
